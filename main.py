import os from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup from telegram.ext import ( ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters, ) from dotenv import load_dotenv

Load environment variables

load_dotenv() BOT_TOKEN = os.getenv("BOT_TOKEN")

In-memory user storage

user_db = {}

Start Command

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): keyboard = [["\ud83d\udce6 \u09ae\u09c7\u09a8\u09c1"]] reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True) await update.message.reply_text( "\ud83c\udf1f \u09b8\u09cd\u09ac\u09be\u0997\u09a4\u09ae Zentix Ai Bot -\u098f!\n\n" "\ud83e\udd16 \u0986\u09ae\u09bf \u0986\u09aa\u09a8\u09be\u09b0 \u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf\u0997\u09a4 AI \u09b8\u09b9\u0995\u09be\u09b0\u09c0\u09c0\u0964\n\n" "\ud83d\udce6 \u09ae\u09c7\u09a8\u09c1 \u09a6\u09c7\u0996\u09a4\u09c7 \u09a8\u09bf\u099a\u09c7\u09b0 '\ud83d\udce6 \u09ae\u09c7\u09a8\u09c1' \u09ac\u09be\u099f\u09a8\u09c7 \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c1\u09a8 \u2014\n" "\u09a8\u09a4\u09c1\u09a8 \u09aa\u09cd\u09b0\u09af\u09c1\u0995\u09cd\u09a4\u09bf\u09b0 \u09b8\u09be\u09a5\u09c7 \u09af\u09c1\u0995\u09cd\u09a4 \u09b9\u09cb\u09a8 \u098f\u0995 \u0995\u09cd\u09b2\u09bf\u0995\u09c7\u0964", reply_markup=reply_markup, parse_mode="Markdown" )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): keyboard = [["\ud83d\udce6 \u09ae\u09c7\u09a8\u09c1"]] reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True) await update.message.reply_text( "\ud83c\udf1f \u09b8\u09cd\u09ac\u09be\u0997\u09a4\u09ae Zentix Ai Bot -\u098f!\n\n" "\ud83e\udd16 \u0986\u09ae\u09bf \u0986\u09aa\u09a8\u09be\u09b0 \u09ac\u09cd\u09af\u0995\u09cd\u09a4\u09bf\u0997\u09a4 AI \u09b8\u09b9\u0995\u09be\u09b0\u09c0\u09c0\u0964\n\n" "\ud83d\udce6 \u09ae\u09c7\u09a8\u09c1 \u09a6\u09c7\u0996\u09a4\u09c7 \u09a8\u09bf\u099a\u09c7\u09b0 '\ud83d\udce6 \u09ae\u09c7\u09a8\u09c1' \u09ac\u09be\u099f\u09a8\u09c7 \u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c1\u09a8 \u2014\n" "\u09a8\u09a4\u09c1\u09a8 \u09aa\u09cd\u09b0\u09af\u09c1\u0995\u09cd\u09a4\u09bf\u09b0 \u09b8\u09be\u09a5\u09c7 \u09af\u09c1\u0995\u09cd\u09a4 \u09b9\u09cb\u09a8 \u098f\u0995 \u0995\u09cd\u09b2\u09bf\u0995\u09c7\u0964", reply_markup=reply_markup, parse_mode="Markdown" )

Menu Command

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE): await send_page(update, context, 1)

Signup/Auth Placeholder

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id if user_id in user_db: await update.callback_query.answer("\u2705 ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶ø‡¶§!", show_alert=True) else: user_db[user_id] = { "name": update.effective_user.full_name, "username": update.effective_user.username, } await update.callback_query.answer("\ud83d\udcc5 ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", show_alert=True)

Menu Pagination

async def send_page(update, context, page): if update.callback_query: chat_id = update.callback_query.message.chat.id await update.callback_query.answer() else: chat_id = update.message.chat.id

if page == 1:
    keyboard = [
        [InlineKeyboardButton("üîë ‡¶∏‡¶æ‡¶á‡¶®‡¶Ü‡¶™ / ‡¶∏‡¶æ‡¶á‡¶®‡¶á‡¶®", callback_data="auth")],
        [InlineKeyboardButton("üéÆ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶°‡¶ø‡¶ü", callback_data="video_edit")],
        [InlineKeyboardButton("üñºÔ∏è ‡¶´‡¶ü‡ßã ‡¶è‡¶°‡¶ø‡¶ü", callback_data="photo_edit")],
        [InlineKeyboardButton("üíº CapCut/Remini Pro", callback_data="capcut")],
        [InlineKeyboardButton("üõ†Ô∏è ‡¶ì‡ßü‡ßá‡¶¨/‡¶∏‡¶´‡¶ü‡¶ì‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞", callback_data="web_order")],
        [InlineKeyboardButton("‚û°Ô∏è ‡¶™‡¶∞‡ßá‡¶∞ ‡¶™‡ßá‡¶ú", callback_data="page_2")]
    ]
elif page == 2:
    keyboard = [
        [InlineKeyboardButton("üì± SMM ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏", callback_data="smm")],
        [InlineKeyboardButton("ü§ñ ‡¶ì‡ßü‡¶æ‡¶ú‡¶ø‡¶´‡¶æ AI", callback_data="wazifa_ai")],
        [InlineKeyboardButton("ü™† Nur AI", callback_data="nur_ai")],
        [InlineKeyboardButton("üìû ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßá‡ßü‡¶æ‡¶∞", callback_data="customer_care")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡ßá‡¶õ‡¶®‡ßá‡¶∞ ‡¶™‡ßá‡¶ú", callback_data="page_1"), InlineKeyboardButton("‚û°Ô∏è ‡¶™‡ßá‡¶ú ‡ß©", callback_data="page_3")]
    ]
else:
    keyboard = [
        [InlineKeyboardButton("üì≤ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ï‡¶Æ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï", callback_data="telecom")],
        [InlineKeyboardButton("üî• ‡¶ó‡ßá‡¶Æ ‡¶ü‡¶™‡¶Ü‡¶™", callback_data="topup")],
        [InlineKeyboardButton("üí≥ ‡¶è‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏", callback_data="balance")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶™‡ßá‡¶õ‡¶®‡ßá‡¶∞ ‡¶™‡ßá‡¶ú", callback_data="page_2")]
    ]

reply_markup = InlineKeyboardMarkup(keyboard)
await context.bot.send_message(
    chat_id=chat_id,
    text="üì¶ ‡¶®‡¶ø‡¶ö‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
    reply_markup=reply_markup
)

Callback handler

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): data = update.callback_query.data if data.startswith("page_"): page_num = int(data.split("_")[1]) await send_page(update, context, page_num) elif data == "auth": await auth(update, context) else: await update.callback_query.answer("üöß ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá!", show_alert=True)

Run Bot

app = ApplicationBuilder().token(BOT_TOKEN).build() app.add_handler(CommandHandler("start", start)) app.add_handler(CommandHandler("menu", menu)) app.add_handler(CallbackQueryHandler(handle_callback)) app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"‡¶Æ‡ßá‡¶®‡ßÅ"), menu)) app.run_polling()
